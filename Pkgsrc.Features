My aim in writing this is to provide information about certain pkgsrc 
features that are very well suited for Haiku.
My hope is to help people that want to use these features.
Or, perhaps, to inform anyone working on Haikuporter the usefulness 
of the features, such that they may decide to add them.

To enact a feature or turn off a setting, edit /boot/home/pkg/etc/mk.conf

1. Pkgsrc annoyance to turn off:

A.) License checks 

SKIP_LICENSE_CHECK = YES

B.) Waiting too long to decide to not download source code:

FETCH_TIMEOUT= 120

C.) Doing a checksum on dowmnloaded source code

NO_CHECKSUM= yes

D.) Refusing to compile "vulnerable packages"

ALLOW_VULNERABLE_PACKAGES= yes

E.) Using hard links in the build process
Useful examples:
#.if ${PKGPATH} == archivers/bzip2 || ${PKGPATH} == "archivers/rzip" \
#|| ${PKGPATH} == "devel/cmake" || ${PKGPATH} == "lang/ruby200-base" \
#|| ${PKGPATH} == "math/fftw"
#TOOLS_PLATFORM.ln?=             /bin/ln -s
#.endif

2. Pkgsrc file location settings you can change:

A.) Where packages are compiled
By default, packages compile in pkgsrc/category/NameOfPackage/work/PackageName-VersionNumber

It is easier to just delete work directories, rather than bmake clean.
To allow for this, without deleting the recipies and patches for a package, 
you can change the location where packages compile. So, for example, if you want
to have your packages land in /boot/work/category/NameOfPackage/work/PackageName-VersionNumber, 
use the followig setting:

WRKOBJDIR= /boot/work

B.) Where source code is downloaded to
By default, pkgsrc places downloaded source files in pkgsrc/distfiles.

If you want to change this, and have the files land in say /boot/distfiles, 
use the following setting:

DISTDIR= /boot/distfiles

C.) Where compiled packages are ultimately placed.
By default, pkgsrc places compiled packages in:
pkgsrc/category/NameOfPackage/work/.packages

If you want to change where the package lands, you have to edit two files: 
NOTE: THERE MAY BE A BETTER WAY TO DO THIS.
I. pkgsrc/mk/pkgformat/pkg/package.mk
II. pkg/etc/mk.conf

If you want your packages to land in /boot/home/packages, edit the following files:

I. pkgsrc/mk/pkgformat/pkg/package.mk
Edit lines 18, 20 and 25 to read as follows:
STAGE_PKGFILE?=		${FINAL-PKG-DESTINATION}/${FILEBASE}-${PKGVERSION}${PKG_SUFX}

II. pkg/etc/mk.conf

FINAL-PKG-DESTINATION= /boot/home/packages

3. Pkgsrc compilation features that will allow you to avoid patching:
NOTE: IF THE ERROR IS PREVELANT, IT IS PROBABLY BEST TO ADD THE FEATURE TO MK.CONF. 
TO USE THE SETTING ON A PACKAGE BY PACKAGE BASIS, ADD THE SETTING TO PKGSRC'S 
MAKEFILE FOR THE PACKAGE LOCATED IN pkgsrc/category/NameOfPackage/Makefile

A.) ADD A LIBRARY TO LINK TO AT COMPILE TIME.

***Method 1***
BUILDLINK_TRANSFORM += 
Useful examples: 
BUILDLINK_TRANSFORM+= -lnetwork
BUILDLINK_TRANSFORM+= -lsupc++
BUILDLINK_TRANSFORM+= -lroot
This works most, but not all the time that -lnetwork is needed to compile an application.

***Method 2***
SUBST_CLASSES+= libs
SUBST_STAGE.libs= pre-build
SUBST_MESSAGE.libs = Adding Haiku lnetwork to libraries
SUBST_FILES.libs=Makefile
SUBST_SED.libs=		-e '/^LFLAGS/s/$$/ -lnetwork/'

Method 2 targets a file of a particular name and edits it

B.) REMOVE NON-EXISTENT LIBRARY FROM COMPILE LINK PROCESS.
BUILDLINK_TRANSFORM += rm:
Useful examples:
BUILDLINK_TRANSFORM+= -rm:-lpthread
BUILDLINK_TRANSFORM+= -rm:-pthread
BUILDLINK_TRANSFORM+= -rm:-lsocket
BUILDLINK_TRANSFORM+= -rm:-ldl
BUILDLINK_TRANSFORM+= -rm:-lltdl
BUILDLINK_TRANSFORM+= -rm:-lm
BUILDLINK_TRANSFORM+= -rm:-lc

.if ${PKGPATH} == "archivers/unrar" || ${PKGPATH} == "net/3proxy"
BUILDLINK_TRANSFORM+= rm:-pthread
.endif

.if ${PKGPATH} == "devel/libexecinfo"
BUILDLINK_TRANSFORM+= rm:-lm
.endif

c.) SUBSTITUTE NON-EXISTENT LIBRARY FROM COMPILE LINK PROCESS WITH EXISTING LIBRARY.
BUILDLINK_TRANSFORM += l: :
Useful examples:
#Replace calls for the math library with a call for root library
BUILDLINK_TRANSFORM+= l:m:root
#Replace calls for the pthread library with a call for root library
BUILDLINK_TRANSFORM+=  l:pthread:root
BUILDLINK_TRANSFORM+=  l:rt:root
BUILDLINK_TRANSFORM+=  l:c:root
BUILDLINK_TRANSFORM+=  l:dl:root
BUILDLINK_TRANSFORM+=  l:bind:network
BUILDLINK_TRANSFORM+=  l:nsl:network
BUILDLINK_TRANSFORM+=  l:socket:network
BUILDLINK_TRANSFORM+=  l:util:bsd
BUILDLINK_TRANSFORM+=  l:getopt:bsd
BUILDLINK_TRANSFORM+=  l:attr:gnu

D.) REMOVE COPMPILER SETTINGS THAT CAUSE COMPILE FAILURE

Useful example:
.if ${PKGPATH} == chat/anope || ${PKGPATH} == "chat/ctrlproxy" \
|| ${PKGPATH} == "chat/eggdrop" || ${PKGPATH} == "cad/covered" \
|| ${PKGPATH} == "cad/covered-current" || ${PKGPATH} == "cad/MyHDL-iverilog" \
|| ${PKGPATH} == "cad/verilog" || ${PKGPATH} == "cad/verilog-current"
BUILDLINK_TRANSFORM+= rm:-rdynamic
.endif

E.) CHOOSE TO USE HEADERS THAT ARE IN A WRITEABLE DIRECTORY
NOTE: Does not work if compile process can't accept -CFLAGS.
This will cause some compile failures.

Two step process: gcc -dumpspecs > /boot/home/pkg/stc/specs

Edit the specs text file, add look for the line that reads:
*cpp:

add -I/boot/home/pkg/include below that line 
So it looks like:
*cpp:
-I/boot/home/pkg/include 

Leave everything else alone.

Copy over the entire contents from:
1. /boot/system/develop/headers/posix
2. /boot/home/system/develop/headers/bsd 
3. /boot/home/develop/headers
into:
1. /boot/home/pkg/include

Next, edit MK.CONF for use on all compiles:

CFLAGS+= -specs=/boot/home/pkg/etc/specs

If you place a # to the left of this setting, you turn this off:
#CFLAGS+= -specs=/boot/home/pkg/etc/specs

E.) PASS LDFLAGS

Useful examples:
To specific packages:

.if ${PKGPATH} == "www/serf"
LDFLAGS+= -Wl,-R${PREFIX}/lib
.endif

.if ${PKGPATH} == "devel/p5-subversion"
LDFLAGS+= -lssp_nonshared
.endif

.if ${PKGPATH} == "net/samba" || ${PKGPATH} == "lang/gcc48-libs"
LDFLAGS+= -Wl,-R/boot/system/lib
.endif

.if ${PKGPATH} == "lang/gcc48-libs"
LDFLAGS+= -L/boot/system/lib
.endif

.if ${PKGPATH} == "graphics/netpbm" || ${PKGPATH} == "security/tcp_wrappers"
LDFLAGS+= -lnetwork
.endif

.if ${PKGPATH} == "textproc/xmlcatmgr" || ${PKGPATH} == "graphics/netpbm" \
|| ${PKGPATH} == "textproc/mdocml" || ${PKGPATH} == "security/mit-krb5" \
|| ${PKGPATH} == "devel/git-base" || ${PKGPATH} == "archivers/p7zip" \
|| ${PKGPATH} == "mail/msmtp" || ${PKGPATH} == "devel/editline" \
|| ${PKGPATH} == "devel/bmkdep" || ${PKGPATH} == "archivers/unrar"
LDFLAGS+= -lbsd
.endif

To all packages:

LDFLAGS+=  -L/boot/home/pkg/lib -lnetwork -Wl,-R/boot/home/pkg/lib
LDFLAGS+=  -L/boot/system/develop/lib/libroot.so -Wl,-R/boot/system/develop/lib

F.) PASS A CONFIGURE ARGUEMENT TO THE COMPILER

Useful examples:

.if ${PKGPATH} == "lang/gcc48-libs" || ${PKGPATH} == "lang/gcc47"
CONFIGURE_ARGS+= --enable-frame-pointer
CONFIGURE_ARGS+= --with-gnu-ld
CONFIGURE_ARGS+= --enable-lto
.endif

.if ${PKGPATH} == "x11/qt4-libs"
CONFIGURE_ARGS+= -no-largefile
CONFIGURE_ARGS+= -fast
CONFIGURE_ARGS+= -no-pch
.endif

.if ${PKGPATH} == "emulators/qemu"
CONFIGURE_ARGS+= --extra-ldflags=-lbsd
.endif

.if ${PKGPATH} == "net/dante"
CONFIGURE_ARGS+= --disable-preload
.endif

.if ${PKGPATH} == "security/openssh"
CONFIGURE_ENV+= use_toolchain_hardening=0
CONFIGURE_ARGS+= --disable-utmpx
CONFIGURE_ARGS+= --with-libedit=${BUILDLINK_PREFIX.editline}/lib
.include "../../devel/editline/buildlink3.mk"
.endif

.if ${PKGPATH} == "comms/minicom"
CONFIGURE_ARGS+= --enable-lock-dir=/var/empty
CONFIGURE_ARGS+= --enable-dfl-port=/dev/ports/usb0
.endif

G.) USE A PARTICULAR COMPILER

Useful examples:

I. For particular packages:
.if ${PKGPATH} == "multimedia/ffmpeg2" || ${PKGPATH} == "multimedia/ffmpeg" \
|| ${PKGPATH} == "multimedia/ffplay" || ${PKGPATH} == "multimedia/ffplay2" \
|| ${PKGPATH} == "multimedia/ffmpeg010"
USE_PKGSRC_GCC= yes
GCC_REQD= 4.7
.endif

II. For all packages:
USE_PKGSRC_GCC= yes
GCC_REQD= 4.7

H.) OVERRIDE COMPILER COMMANDS EMBEDDED IN MAKEFILE, CONFIGURE, ETC.

Useful examples:

.if ${PKGPATH} == "devel/ncurses" || ${PKGPATH} == "devel/ncursesw"
SUBST_CLASSES+= sh
SUBST_STAGE.sh= post-configure
SUBST_MESSAGE.sh= Fix broken event on Haiku.
SUBST_FILES.sh= edit_man.sh include/MKkey_defs.sh \
include/edit_cfg.sh man/make_sed.sh \
man/MKterminfo.sh ncurses/base/MKlib_gen.sh \
ncurses/tinfo/MKkeys_list.sh ncurses/tty/MKexpanded.sh \
progs/MKtermsort.sh progs/capconvert
SUBST_SED.sh+= -e 's/1 2 5 15/1 2 15/g'
.endif

.if ${PKGPATH} == "lang/python27"
LDFLAGS+= -L/boot/system/lib
SUBST_CLASSES+= symlink
SUBST_STAGE.symlink= pre-configure
SUBST_FILES.symlink= Makefile.pre.in
SUBST_SED.symlink= -e 's,LN) -f ,LN) -sf ,g'
.endif

.if ${PKGPATH} == "devel/gobject-introspection"
SUBST_CLASSES+= fix_ld
SUBST_STAGE.fix_ld= post-configure
SUBST_FILES.fix_ld= giscanner/shlibs.py
SUBST_SED.fix_ld= -e "s|'ldd'|'fakeldd'|"
.endif

I.) OVERRIDE PACKAGE DEFAULTS

PKG_OPTIONS.perl= -threads
PKG_OPTIONS.git= -git-send-email
PKG_OPTIONS.SDL= aalib
PKG_OPTIONS.gcc47= -gcc-fortran -gcc-java -gcc-objc -gcc-objc++
PKG_OPTIONS.gcc48= -gcc-graphite -gcc-java
PKG_OPTIONS.freetype2= subpixel
PKG_OPTIONS.mplayer= -mplayer-runtime-cpudetection
PKG_OPTIONS.psi= -enchant -aspell
PKG_OPTIONS.mc= mc-samba ncurses
PKG_OPTIONS.php= suhosin
PKG_OPTIONS.cherokee= -pam
PKG_OPTIONS.boost= icu
PKG_OPTIONS.cairo= -xcb
PKG_OPTIONS.samba= -ads -ldap -winbind -pam
PKG_OPTIONS.subversion= -serf
PKG_OPTIONS.tinyproxy= -socks5
PKG_OPTIONS.squid= -inet6 -snmp -squid-backend-diskd -squid-carp -squid-pam-helper squid-unlinkd ssl

J.) CHOOSE TO USE PKGSRC'S OR HAIKU'S TOOL WHEN BUILDING PACKAES
Example:
USE_BUILTIN.zlib=	no

K.) TWEAK SPECIFIC ITEMS IN PACKAGES

Useful examples:

.if ${PKGPATH} == "net/3proxy"
MAKE_FILE= Makefile.haiku
.endif

.if ${PKGPATH} == "security/tcp_wrappers"
BUILD_TARGET.Haiku= haiku
.endif

.if ${PKGPATH} == "pkgtools/rc.subr"
ONLY_FOR_PLATFORM+= Haiku-*-*
.endif

L.) SET PKGSRC DEFAULTS:
Examples:

KRB5_DEFAULT= mit-krb5
CURSES_DEFAULT?=	ncurses
PYTHON_VERSION_DEFAULT = 34
X11_TYPE=modular

M.) TURN OFF PKGSRC DEPENDENCIES NOT APPLICABLE TO HAIKU:
Example:
PKG_DEFAULT_OPTIONS= -x11 -esound -nas -pulseaudio wide-curses

